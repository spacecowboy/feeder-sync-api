// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: feeder/v2/api.proto

package feeder_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeederSyncApi_CreateChain_FullMethodName     = "/feeder.v2.FeederSyncApi/CreateChain"
	FeederSyncApi_JoinChain_FullMethodName       = "/feeder.v2.FeederSyncApi/JoinChain"
	FeederSyncApi_GetUserDevice_FullMethodName   = "/feeder.v2.FeederSyncApi/GetUserDevice"
	FeederSyncApi_GetReadMarks_FullMethodName    = "/feeder.v2.FeederSyncApi/GetReadMarks"
	FeederSyncApi_UpdateReadMarks_FullMethodName = "/feeder.v2.FeederSyncApi/UpdateReadMarks"
	FeederSyncApi_GetDevices_FullMethodName      = "/feeder.v2.FeederSyncApi/GetDevices"
	FeederSyncApi_DeleteDevice_FullMethodName    = "/feeder.v2.FeederSyncApi/DeleteDevice"
	FeederSyncApi_GetFeeds_FullMethodName        = "/feeder.v2.FeederSyncApi/GetFeeds"
	FeederSyncApi_UpdateFeeds_FullMethodName     = "/feeder.v2.FeederSyncApi/UpdateFeeds"
)

// FeederSyncApiClient is the client API for FeederSyncApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeederSyncApiClient interface {
	// Create a new user and chain
	CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainResponse, error)
	// Join an existing chain with a new device
	JoinChain(ctx context.Context, in *JoinChainRequest, opts ...grpc.CallOption) (*JoinChainResponse, error)
	// Get the user and device for the current chain. Used for migrating to v2
	GetUserDevice(ctx context.Context, in *GetUserDeviceRequest, opts ...grpc.CallOption) (*GetUserDeviceResponse, error)
	GetReadMarks(ctx context.Context, in *GetReadMarksRequest, opts ...grpc.CallOption) (*GetReadMarksResponse, error)
	UpdateReadMarks(ctx context.Context, in *UpdateReadMarksRequest, opts ...grpc.CallOption) (*UpdateReadMarksResponse, error)
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	GetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (*GetFeedsResponse, error)
	UpdateFeeds(ctx context.Context, in *UpdateFeedsRequest, opts ...grpc.CallOption) (*UpdateFeedsResponse, error)
}

type feederSyncApiClient struct {
	cc grpc.ClientConnInterface
}

func NewFeederSyncApiClient(cc grpc.ClientConnInterface) FeederSyncApiClient {
	return &feederSyncApiClient{cc}
}

func (c *feederSyncApiClient) CreateChain(ctx context.Context, in *CreateChainRequest, opts ...grpc.CallOption) (*CreateChainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChainResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_CreateChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederSyncApiClient) JoinChain(ctx context.Context, in *JoinChainRequest, opts ...grpc.CallOption) (*JoinChainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinChainResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_JoinChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederSyncApiClient) GetUserDevice(ctx context.Context, in *GetUserDeviceRequest, opts ...grpc.CallOption) (*GetUserDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDeviceResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_GetUserDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederSyncApiClient) GetReadMarks(ctx context.Context, in *GetReadMarksRequest, opts ...grpc.CallOption) (*GetReadMarksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadMarksResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_GetReadMarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederSyncApiClient) UpdateReadMarks(ctx context.Context, in *UpdateReadMarksRequest, opts ...grpc.CallOption) (*UpdateReadMarksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReadMarksResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_UpdateReadMarks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederSyncApiClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDevicesResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_GetDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederSyncApiClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederSyncApiClient) GetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (*GetFeedsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedsResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_GetFeeds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederSyncApiClient) UpdateFeeds(ctx context.Context, in *UpdateFeedsRequest, opts ...grpc.CallOption) (*UpdateFeedsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeedsResponse)
	err := c.cc.Invoke(ctx, FeederSyncApi_UpdateFeeds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeederSyncApiServer is the server API for FeederSyncApi service.
// All implementations must embed UnimplementedFeederSyncApiServer
// for forward compatibility.
type FeederSyncApiServer interface {
	// Create a new user and chain
	CreateChain(context.Context, *CreateChainRequest) (*CreateChainResponse, error)
	// Join an existing chain with a new device
	JoinChain(context.Context, *JoinChainRequest) (*JoinChainResponse, error)
	// Get the user and device for the current chain. Used for migrating to v2
	GetUserDevice(context.Context, *GetUserDeviceRequest) (*GetUserDeviceResponse, error)
	GetReadMarks(context.Context, *GetReadMarksRequest) (*GetReadMarksResponse, error)
	UpdateReadMarks(context.Context, *UpdateReadMarksRequest) (*UpdateReadMarksResponse, error)
	GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	GetFeeds(context.Context, *GetFeedsRequest) (*GetFeedsResponse, error)
	UpdateFeeds(context.Context, *UpdateFeedsRequest) (*UpdateFeedsResponse, error)
	mustEmbedUnimplementedFeederSyncApiServer()
}

// UnimplementedFeederSyncApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeederSyncApiServer struct{}

func (UnimplementedFeederSyncApiServer) CreateChain(context.Context, *CreateChainRequest) (*CreateChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChain not implemented")
}
func (UnimplementedFeederSyncApiServer) JoinChain(context.Context, *JoinChainRequest) (*JoinChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChain not implemented")
}
func (UnimplementedFeederSyncApiServer) GetUserDevice(context.Context, *GetUserDeviceRequest) (*GetUserDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDevice not implemented")
}
func (UnimplementedFeederSyncApiServer) GetReadMarks(context.Context, *GetReadMarksRequest) (*GetReadMarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadMarks not implemented")
}
func (UnimplementedFeederSyncApiServer) UpdateReadMarks(context.Context, *UpdateReadMarksRequest) (*UpdateReadMarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadMarks not implemented")
}
func (UnimplementedFeederSyncApiServer) GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedFeederSyncApiServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedFeederSyncApiServer) GetFeeds(context.Context, *GetFeedsRequest) (*GetFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeds not implemented")
}
func (UnimplementedFeederSyncApiServer) UpdateFeeds(context.Context, *UpdateFeedsRequest) (*UpdateFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeds not implemented")
}
func (UnimplementedFeederSyncApiServer) mustEmbedUnimplementedFeederSyncApiServer() {}
func (UnimplementedFeederSyncApiServer) testEmbeddedByValue()                       {}

// UnsafeFeederSyncApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeederSyncApiServer will
// result in compilation errors.
type UnsafeFeederSyncApiServer interface {
	mustEmbedUnimplementedFeederSyncApiServer()
}

func RegisterFeederSyncApiServer(s grpc.ServiceRegistrar, srv FeederSyncApiServer) {
	// If the following call pancis, it indicates UnimplementedFeederSyncApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeederSyncApi_ServiceDesc, srv)
}

func _FeederSyncApi_CreateChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).CreateChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_CreateChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).CreateChain(ctx, req.(*CreateChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederSyncApi_JoinChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).JoinChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_JoinChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).JoinChain(ctx, req.(*JoinChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederSyncApi_GetUserDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).GetUserDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_GetUserDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).GetUserDevice(ctx, req.(*GetUserDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederSyncApi_GetReadMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).GetReadMarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_GetReadMarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).GetReadMarks(ctx, req.(*GetReadMarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederSyncApi_UpdateReadMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadMarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).UpdateReadMarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_UpdateReadMarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).UpdateReadMarks(ctx, req.(*UpdateReadMarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederSyncApi_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).GetDevices(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederSyncApi_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederSyncApi_GetFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).GetFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_GetFeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).GetFeeds(ctx, req.(*GetFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederSyncApi_UpdateFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederSyncApiServer).UpdateFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederSyncApi_UpdateFeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederSyncApiServer).UpdateFeeds(ctx, req.(*UpdateFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeederSyncApi_ServiceDesc is the grpc.ServiceDesc for FeederSyncApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeederSyncApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feeder.v2.FeederSyncApi",
	HandlerType: (*FeederSyncApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChain",
			Handler:    _FeederSyncApi_CreateChain_Handler,
		},
		{
			MethodName: "JoinChain",
			Handler:    _FeederSyncApi_JoinChain_Handler,
		},
		{
			MethodName: "GetUserDevice",
			Handler:    _FeederSyncApi_GetUserDevice_Handler,
		},
		{
			MethodName: "GetReadMarks",
			Handler:    _FeederSyncApi_GetReadMarks_Handler,
		},
		{
			MethodName: "UpdateReadMarks",
			Handler:    _FeederSyncApi_UpdateReadMarks_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _FeederSyncApi_GetDevices_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _FeederSyncApi_DeleteDevice_Handler,
		},
		{
			MethodName: "GetFeeds",
			Handler:    _FeederSyncApi_GetFeeds_Handler,
		},
		{
			MethodName: "UpdateFeeds",
			Handler:    _FeederSyncApi_UpdateFeeds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feeder/v2/api.proto",
}
